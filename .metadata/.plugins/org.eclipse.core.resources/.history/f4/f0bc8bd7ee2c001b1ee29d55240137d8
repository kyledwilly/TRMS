package com.revature.data;

import java.sql.Statement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Set;

import com.revature.beans.Role;
import com.revature.beans.User;
import com.revature.utils.ConnectionUtil;

public class UserPostgres implements UserDAO {

	private ConnectionUtil cu = ConnectionUtil.getConnectionUtil();

//	@Override
//	public Person add(Person t) {
//		Person p = null;
//		
//		try (Connection conn = cu.getConnection()) {
//			conn.setAutoCommit(false);
//			String sql = "insert into person values (default, ?, ?, ?)";
//			String[] keys = {"id"};
//			PreparedStatement pstmt = conn.prepareStatement(sql, keys);
//			pstmt.setString(1, t.getUsername());
//			pstmt.setString(2, t.getPassword());
//			pstmt.setInt(3, t.getRole().getId());
//			
//			pstmt.executeUpdate();
//			ResultSet rs = pstmt.getGeneratedKeys();
//			
//			if (rs.next()) {
//				p = t;
//				p.setId(rs.getInt(1));
//				conn.commit();
//			} else {
//				conn.rollback();
//			}
//			
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//		
//		return p;
//	}
	
	
	@Override
	public User create(User u) throws Exception {
		// TODO Auto-generated method stub
		User user = null;
		
		try(Connection con = cu.getConnection()){
			con.setAutoCommit(false);

			String sql = "insert into users(id, username, passwd, user_role_id) values (default, ?, ? , ?);\r\n";
	
			String[] keys = {"id"};
			PreparedStatement pstmt = con.prepareStatement(sql, keys);
			pstmt.setString(1, u.getName());
			pstmt.setString(2, u.getPassword());
			pstmt.setInt(3, u.getRole().getId());
			
			pstmt.executeUpdate();
			
			ResultSet results = pstmt.getGeneratedKeys();
			if(results.next()) {
				user = u;
				u.setId(results.getInt(1));
				con.commit();	
			}
			else {
				con.rollback();
			}	
		} catch (Exception e) {
			e.printStackTrace();
		}
		return user;
	}
	
	@Override
	public User read(Integer id) {
		User user = null;
		
		try (Connection con = cu.getConnection()) {
			String sql = "select users.id as user_id, users.username as username, users.passwd as passwd, users.user_role_id as user_role_id, user_role.\"name\" as user_role from users join user_role on users.user_role_id = user_role.id where users.id = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, id);
			ResultSet results = pstmt.executeQuery();
			
			if (results.next()) {
				System.out.println("retrieved user by id (" + id + ") with name " + results.getString("username"));
				user = new User();
				user.setId(results.getInt("user_id"));
				user.setName(results.getString("username"));
				
				user.setPassword(results.getString("passwd"));
				Role role = new Role(results.getInt("user_role_id"));
				user.setRole(role);
				
				//user.setCats(getCatsByPersonId(user.getId(), conn));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return user;
	}

	@Override
	public void update(User u) {
		// TODO Auto-generated method stub

	}
	@Override
	public void delete() {
		// TODO Auto-generated method stub

	}
	@Override
	public Set<User> List() {
		// TODO Auto-generated method stub
		return null;
	}
	/*	public Set<Person> getAll() {
		Set<Person> people = new HashSet<>();
		
		try (Connection conn = cu.getConnection()) {
			String sql = "select person.id as person_id, user_role.id as role_id, username, passwd, "
					+ "user_role.name as role_name from person join user_role on user_role_id = user_role.id";
			Statement state = conn.createStatement();
			ResultSet rs = state.executeQuery(sql);
			
			while (rs.next()) {
				Person human = new Person();
				human.setId(rs.getInt("person_id"));
				human.setUsername(rs.getString("username"));
				human.setPassword(rs.getString("passwd"));
				Role job = new Role();
				job.setId(rs.getInt("role_id"));
				job.setName(rs.getString("role_name"));
				human.setRole(job);
				
				human.setCats(getCatsByPersonId(human.getId(), conn));
				
				people.add(human);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return people;
	}*/
}
